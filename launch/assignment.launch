<?xml version="1.0"?>
<launch>
	
	  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="assignment_world" />
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find assignment2)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>





  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>
	
	<!-- LACIA IL NODO DEL MARKER_SERVER.CPP -->
   <node name="marker_server" pkg="assignment2" type="marker_server"/>  <!-- output="screen" launch-prefix="lxterminal -e" -->
     
   
     <!-- spawn robot in the environment-->
   <arg name="model" default="$(find assignment2)/urdf/provaRobotAss.xacro" />
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)" />
	
	<param name="use_gui" value="True"/>
    <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" ></node>
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> 
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find urdf_tutorial)/urdf.rviz" />

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model robot1 -param robot_description -x -6.0 -y 11.0"/> <!--METTERE y 11.0 -->
	
	
   <rosparam file="$(find assignment2)/config/my_motors_config.yaml" command="load" ns="/m2wr" /> <!-- N.B. important to use the same namespace used in the PLUGIN -->

   <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="--namespace=/m2wr
        joint_state_controller
        joint1_position_controller
        joint2_position_controller
        joint3_position_controller
        joint4_position_controller       
        --shutdown-timeout 3">
    </node> 
    
  <!-- launch marker publisher node and remap topic--> 
    <remap from="/image" to="/robot/camera1/image_raw"/>
    <node name="marker_publish_node" pkg="assignment2" type="marker_publish_node"/> <!--  output="screen" launch-prefix="lxterminal -e"-->
    
  <!-- launch move_arm_server_node-->
    <node name="move_arm_server_node" pkg="assignment2" type="move_arm_server_node"/>
  
    <!-- launch gmapping and move_base --> 
 <include file="$(find assignment2)/launch/move_base.launch" />
 <include file="$(find assignment2)/launch/gmapping.launch" />

</launch>

